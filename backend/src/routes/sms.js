const express = require('express');
const router = express.Router();
const authMiddleware = require('../middleware/auth');
const vonageService = require('../services/vonageService');
const prisma = require('../config/database');
const rateLimiter = require('../middleware/rateLimiter');
const crypto = require('crypto');

// Route pour d√©marrer la v√©rification SMS
router.post('/verify/start', authMiddleware, rateLimiter.smsLimiter, async (req, res) => {
  try {
    const { phone } = req.body;
    const userId = req.user.id;

    if (!phone) {
      return res.status(400).json({
        error: 'Num√©ro de t√©l√©phone requis'
      });
    }

    // Formater le num√©ro de t√©l√©phone
    const formattedPhone = vonageService.formatPhoneNumber(phone, '+20'); // √âgypte

    // Envoyer le SMS
    const smsResult = await vonageService.sendVerificationSMS(formattedPhone);

    if (smsResult.success) {
      // Sauvegarder le code en base pour cet utilisateur
      await prisma.user.update({
        where: { id: userId },
        data: {
          phone: formattedPhone, // Sauvegarder aussi le num√©ro
          phoneVerificationToken: smsResult.code, // Stocker le code g√©n√©r√©
          phoneVerificationExpires: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes
          phoneVerificationAttempts: { increment: 1 } // Incr√©menter les tentatives
        }
      });

      res.json({
        success: true,
        message: 'Code de v√©rification envoy√© par SMS',
        messageId: smsResult.messageId,
        phone: vonageService.maskPhoneNumber(formattedPhone), // Num√©ro masqu√©
        expiresIn: 600 // 10 minutes
      });
    } else {
      res.status(400).json({
        error: 'Erreur lors de l\'envoi du SMS'
      });
    }

  } catch (error) {
    console.error('Erreur d√©marrage v√©rification SMS:', error);
    res.status(500).json({
      error: 'Erreur lors de l\'envoi du SMS de v√©rification'
    });
  }
});

// Route pour v√©rifier le code SMS
router.post('/verify/check', authMiddleware, rateLimiter.smsVerifyLimiter, async (req, res) => {
  try {
    const { code } = req.body;
    const userId = req.user.id;

    if (!code) {
      return res.status(400).json({
        error: 'Code de v√©rification requis'
      });
    }

    // R√©cup√©rer le code stock√© depuis la base
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        phoneVerificationToken: true,
        phoneVerificationExpires: true
      }
    });

    if (!user.phoneVerificationToken) {
      return res.status(400).json({
        error: 'Aucune v√©rification en cours'
      });
    }

    if (new Date() > user.phoneVerificationExpires) {
      return res.status(400).json({
        error: 'Code de v√©rification expir√©'
      });
    }

    // Comparer le code
    if (user.phoneVerificationToken === code) {
      // Marquer le t√©l√©phone comme v√©rifi√©
      await prisma.user.update({
        where: { id: userId },
        data: {
          phoneVerified: true,
          phoneVerificationToken: null,
          phoneVerificationExpires: null,
          phoneVerificationAttempts: 0 // Reset compteur
        }
      });

      res.json({
        success: true,
        message: 'T√©l√©phone v√©rifi√© avec succ√®s'
      });
    } else {
      res.status(400).json({
        error: 'Code de v√©rification incorrect'
      });
    }

  } catch (error) {
    console.error('Erreur v√©rification code SMS:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification du code'
    });
  }
});

// ================================
// üîê MIDDLEWARE S√âCURIT√â WEBHOOK
// ================================

const validateWebhookSignature = (req, res, next) => {
  if (process.env.NODE_ENV === 'production' && process.env.VONAGE_SIGNATURE_SECRET) {
    try {
      const signature = req.headers['authorization'] || req.headers['x-nexmo-signature'];
      const payload = JSON.stringify(req.body);
      
      const expectedSignature = crypto
        .createHmac('sha256', process.env.VONAGE_SIGNATURE_SECRET)
        .update(payload)
        .digest('hex');
      
      if (!signature || !signature.includes(expectedSignature)) {
        console.log('‚ùå Signature webhook Vonage invalide');
        return res.status(401).json({ error: 'Unauthorized webhook' });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur validation signature:', error.message);
    }
  }
  
  next();
};

// ================================
// üì® WEBHOOK : SMS ENTRANTS
// ================================

router.post('/webhook', rateLimiter.apiLimiter, validateWebhookSignature, async (req, res) => {
  try {
    const {
      messageId,
      from,         // Utilisateur qui r√©pond
      to,           // Ton num√©ro Cheapship
      text,         // Message re√ßu
      timestamp,
      type = 'text'
    } = req.body;

    console.log(`üì® SMS entrant: ${from} ‚Üí ${to}: "${text?.substring(0, 30)}..."`);

    // V√©rification automatique de code
    const codePattern = /^\s*(\d{6})\s*$/;
    const codeMatch = text?.match(codePattern);
    
    if (codeMatch) {
      const code = codeMatch[1];
      console.log('üîê Code de v√©rification d√©tect√©:', code);
      
      try {
        // Chercher l'utilisateur avec ce num√©ro et ce code
        const user = await prisma.user.findFirst({
          where: {
            phone: from,
            phoneVerificationToken: code,
            phoneVerificationExpires: { gt: new Date() },
            phoneVerified: false
          }
        });

        if (user) {
          // V√©rifier automatiquement
          await prisma.user.update({
            where: { id: user.id },
            data: {
              phoneVerified: true,
              phoneVerificationToken: null,
              phoneVerificationExpires: null,
              phoneVerificationAttempts: 0
            }
          });

          console.log(`‚úÖ V√©rification automatique r√©ussie pour utilisateur ${user.id}`);
          
          // SMS de confirmation
          await vonageService.sendVerificationSMS(from, 
            "‚úÖ Cheapship: Votre t√©l√©phone est maintenant v√©rifi√© ! Bienvenue sur notre plateforme."
          );
        } else {
          console.log('‚ùå Code incorrect ou expir√©');
        }
      } catch (dbError) {
        console.error('‚ùå Erreur v√©rification auto:', dbError);
      }
    }

    // R√©ponses automatiques
    const lowerText = text?.toLowerCase() || '';
    
    if (lowerText.includes('help') || lowerText.includes('aide')) {
      await vonageService.sendVerificationSMS(from, 
        "üÜò Cheapship Support: Visitez https://cheapship.fr/help ou √©crivez √† support@cheapship.fr"
      );
    } else if (lowerText.includes('stop') || lowerText.includes('arret')) {
      console.log('üõë D√©sabonnement demand√© par:', from);
      // Marquer comme d√©sabonn√©
    }

    res.status(200).json({ 
      success: true,
      messageId,
      processed: true,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur webhook SMS:', error);
    res.status(200).json({ success: false, error: 'Processed with errors' });
  }
});

// ================================
// üìä WEBHOOK : STATUT LIVRAISON
// ================================

router.post('/status', rateLimiter.apiLimiter, validateWebhookSignature, async (req, res) => {
  try {
    const {
      messageId,
      to,
      status,           // delivered, failed, expired, rejected
      timestamp,
      'err-code': errorCode,
      'err-text': errorText,
      price,
      'client-ref': clientRef,
      network
    } = req.body;

    const maskedTo = to?.replace(/(\+\d{2})(\d+)(\d{2})/, '$1***$3');
    console.log(`üìä Statut ${messageId}: ${status} ‚Üí ${maskedTo}`);

    // Analytics tracking
    if (req.socketService) {
      try {
        const AnalyticsService = require('../services/analyticsService');
        await AnalyticsService.trackEvent({
          eventType: 'sms_delivery_status',
          metadata: {
            messageId,
            status,
            errorCode,
            price: price ? parseFloat(price) : null,
            network,
            deliveredAt: timestamp
          }
        });
      } catch (analyticsError) {
        console.log('‚ö†Ô∏è Analytics SMS √©chou√©:', analyticsError.message);
      }
    }

    // Gestion par statut
    switch (status) {
      case 'delivered':
        console.log('‚úÖ SMS livr√© avec succ√®s');
        break;
        
      case 'failed':
        console.log(`‚ùå √âchec livraison SMS: ${errorCode} - ${errorText}`);
        // Optionnel : retry ou notification admin
        break;
        
      case 'expired':
        console.log('‚è∞ SMS expir√© avant livraison');
        break;
        
      case 'rejected':
        console.log('üö´ SMS rejet√© par l\'op√©rateur');
        break;
        
      default:
        console.log(`‚ùì Statut SMS inconnu: ${status}`);
    }

    res.status(200).json({
      success: true,
      messageId,
      status,
      processed: true,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur webhook statut:', error);
    res.status(200).json({ success: false, error: 'Status processed with errors' });
  }
});

// ================================
// üîß ENDPOINT TEST WEBHOOKS
// ================================

router.get('/webhooks/status', (req, res) => {
  res.json({
    webhooks: {
      sms_entrants: {
        endpoint: '/api/sms/webhook',
        method: 'POST',
        status: '‚úÖ Op√©rationnel'
      },
      statut_livraison: {
        endpoint: '/api/sms/status', 
        method: 'POST',
        status: '‚úÖ Op√©rationnel'
      }
    },
    configuration: {
      vonage_configured: process.env.VONAGE_API_KEY ? '‚úÖ' : '‚ùå',
      signature_validation: process.env.VONAGE_SIGNATURE_SECRET ? '‚úÖ' : '‚ùå',
      environment: process.env.NODE_ENV
    },
    urls_vonage: {
      inbound: 'https://cheapship-back.onrender.com/api/sms/webhook',
      delivery_receipt: 'https://cheapship-back.onrender.com/api/sms/status'
    }
  });
});

module.exports = router;