const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const rateLimit = require('express-rate-limit'); // ‚úÖ AJOUT pour rate limiting
const router = express.Router();
const prisma = require('../config/database');
const authConfig = require('../config/auth');
const authMiddleware = require('../middleware/auth');
// ‚úÖ CORRECTION : Import unique du service email
const emailService = require('../services/emailService');

// ‚úÖ AJOUT : Rate limiting pour le renvoi d'email
const resendVerificationLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 1, // 1 tentative par minute par IP
  message: {
    error: 'Trop de tentatives. Veuillez attendre 1 minute avant de renvoyer un email.'
  },
  standardHeaders: true,
  legacyHeaders: false,
});

// ================================
// INSCRIPTION
// ================================

router.post('/register', async (req, res) => {
  try {
    const { email, password, fullName, phone } = req.body;

    // Validation des donn√©es
    if (!email || !password || !fullName) {
      return res.status(400).json({
        error: 'Email, mot de passe et nom complet requis'
      });
    }

    // ‚úÖ VALIDATION RENFORC√âE DU MOT DE PASSE
    if (password.length < 8 || 
        !/[A-Z]/.test(password) || 
        !/[a-z]/.test(password) || 
        !/\d/.test(password) || 
        !/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      return res.status(400).json({
        error: 'Le mot de passe doit contenir au moins 8 caract√®res, une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial'
      });
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    });

    if (existingUser) {
      return res.status(409).json({
        error: 'Un compte avec cet email existe d√©j√†'
      });
    }

    // Hasher le mot de passe
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // G√©n√©rer un token de v√©rification
    const verificationToken = crypto.randomBytes(32).toString('hex');

    // Cr√©er l'utilisateur
    const user = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        password: hashedPassword,
        fullName,
        phone,
        verificationToken,
        verificationExpires: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24h
      },
      select: {
        id: true,
        email: true,
        fullName: true,
        emailVerified: true,
        createdAt: true
      }
    });

    // G√©n√©rer un JWT
    const token = jwt.sign(
      { id: user.id, email: user.email },
      authConfig.jwtSecret,
      { expiresIn: '7d' }
    );

    console.log('‚úÖ Nouvel utilisateur cr√©√©:', user.email);

    // ‚úÖ ENVOYER EMAIL DE V√âRIFICATION
    try {
      const emailResult = await emailService.sendVerificationEmail(user, verificationToken);
      if (emailResult.success) {
        console.log('‚úÖ Email de v√©rification envoy√©');
      } else {
        console.error('‚ùå Erreur envoi email:', emailResult.error);
      }
    } catch (emailError) {
      console.error('‚ùå Erreur critique envoi email:', emailError);
    }

    res.status(201).json({
      message: 'Compte cr√©√© avec succ√®s',
      user,
      token,
      note: 'V√©rifiez votre email pour activer votre compte'
    });

  } catch (error) {
    console.error('‚ùå Erreur inscription:', error);
    res.status(500).json({
      error: 'Erreur lors de la cr√©ation du compte'
    });
  }
});

// ================================
// CONNEXION
// ================================

router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        error: 'Email et mot de passe requis'
      });
    }

    // Trouver l'utilisateur
    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    });

    if (!user) {
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier le mot de passe
    const validPassword = await bcrypt.compare(password, user.password);

    if (!validPassword) {
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // V√©rifier que le compte est actif
    if (!user.isActive) {
      return res.status(401).json({
        error: 'Compte d√©sactiv√©'
      });
    }

    // Mettre √† jour la derni√®re connexion
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });

    // G√©n√©rer un JWT
    const token = jwt.sign(
      { id: user.id, email: user.email },
      authConfig.jwtSecret,
      { expiresIn: '7d' }
    );

    console.log('‚úÖ Connexion r√©ussie:', user.email);

    res.json({
      message: 'Connexion r√©ussie',
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        emailVerified: user.emailVerified,
        role: user.role,
        profilePicture: user.profilePicture,
        rating: user.rating,
        totalRatings: user.totalRatings
      },
      token
    });

  } catch (error) {
    console.error('‚ùå Erreur connexion:', error);
    res.status(500).json({
      error: 'Erreur lors de la connexion'
    });
  }
});

// ================================
// MOT DE PASSE OUBLI√â
// ================================

router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        error: 'Email requis'
      });
    }

    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    });

    if (!user) {
      // Ne pas r√©v√©ler si l'email existe ou non
      return res.json({
        message: 'Si cet email existe, vous recevrez un lien de r√©initialisation'
      });
    }

    // G√©n√©rer un token de r√©initialisation
    const resetToken = crypto.randomBytes(32).toString('hex');

    await prisma.user.update({
      where: { id: user.id },
      data: {
        resetPasswordToken: resetToken,
        resetPasswordExpires: new Date(Date.now() + 60 * 60 * 1000) // 1h
      }
    });

    console.log('‚úÖ Token de r√©initialisation g√©n√©r√© pour:', user.email);

    // ‚úÖ ENVOYER EMAIL DE R√âINITIALISATION
    try {
      const emailResult = await emailService.sendPasswordResetEmail(user, resetToken);
      if (emailResult.success) {
        console.log('‚úÖ Email de r√©initialisation envoy√©');
      } else {
        console.error('‚ùå Erreur envoi email:', emailResult.error);
      }
    } catch (emailError) {
      console.error('‚ùå Erreur critique envoi email:', emailError);
    }

    res.json({
      message: 'Si cet email existe, vous recevrez un lien de r√©initialisation'
    });

  } catch (error) {
    console.error('‚ùå Erreur mot de passe oubli√©:', error);
    res.status(500).json({
      error: 'Erreur lors de la demande de r√©initialisation'
    });
  }
});

// ================================
// R√âINITIALISER MOT DE PASSE
// ================================

router.post('/reset-password', async (req, res) => {
  try {
    console.log('üìù D√©but reset-password:', new Date().toISOString());
    
    const { token, password } = req.body;

    if (!token || !password) {
      console.log('‚ùå Donn√©es manquantes');
      return res.status(400).json({
        error: 'Token et nouveau mot de passe requis'
      });
    }

    // Validation du mot de passe
    if (password.length < 8 || 
        !/[A-Z]/.test(password) || 
        !/[a-z]/.test(password) || 
        !/\d/.test(password) || 
        !/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
      console.log('‚ùå Mot de passe invalide');
      return res.status(400).json({
        error: 'Le mot de passe doit contenir au moins 8 caract√®res, une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial'
      });
    }

    console.log('üîç Recherche utilisateur avec token...');
    
    const user = await prisma.user.findFirst({
      where: {
        resetPasswordToken: token,
        resetPasswordExpires: {
          gt: new Date()
        }
      }
    });

    if (!user) {
      console.log('‚ùå Token invalide ou expir√©');
      return res.status(400).json({
        error: 'Token invalide ou expir√©'
      });
    }

    console.log('‚úÖ Utilisateur trouv√©:', user.email);

    // Hasher le nouveau mot de passe
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    console.log('üîí Mise √† jour du mot de passe...');

    // Mettre √† jour le mot de passe
    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashedPassword,
        resetPasswordToken: null,
        resetPasswordExpires: null
      }
    });

    console.log('‚úÖ Mot de passe r√©initialis√© pour:', user.email);

    // ‚úÖ CONNEXION AUTOMATIQUE APR√àS RESET
    const loginToken = jwt.sign(
      { id: user.id, email: user.email },
      authConfig.jwtSecret,
      { expiresIn: '7d' }
    );

    console.log('üé´ Token de connexion g√©n√©r√©');

    res.json({
      message: 'Mot de passe r√©initialis√© avec succ√®s',
      token: loginToken,
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        emailVerified: user.emailVerified,
        role: user.role
      }
    });

    console.log('üìù Fin reset-password r√©ussie:', new Date().toISOString());

  } catch (error) {
    console.error('‚ùå ERREUR CRITIQUE reset-password:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({
      error: 'Erreur lors de la r√©initialisation'
    });
  }
});

// ================================
// V√âRIFICATION EMAIL
// ================================

router.post('/verify-email', async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        error: 'Token de v√©rification requis'
      });
    }

    const user = await prisma.user.findFirst({
      where: {
        verificationToken: token,
        verificationExpires: {
          gt: new Date()
        }
      }
    });

    if (!user) {
      return res.status(400).json({
        error: 'Token invalide ou expir√©'
      });
    }

    // Mettre √† jour l'utilisateur
    await prisma.user.update({
      where: { id: user.id },
      data: {
        emailVerified: true,
        verificationToken: null,
        verificationExpires: null
      }
    });

    console.log('‚úÖ Email v√©rifi√©:', user.email);

    // ‚úÖ ENVOYER EMAIL DE BIENVENUE
    try {
      const emailResult = await emailService.sendWelcomeEmail(user);
      if (emailResult.success) {
        console.log('‚úÖ Email de bienvenue envoy√©');
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email de bienvenue:', emailError);
    }

    res.json({
      message: 'Email v√©rifi√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur v√©rification email:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification'
    });
  }
});

// ‚úÖ NOUVELLE ROUTE : RENVOYER EMAIL DE V√âRIFICATION
router.post('/resend-verification', 
  resendVerificationLimiter, 
  authMiddleware, 
  async (req, res) => {
  try {
    const userId = req.user.id;

    // R√©cup√©rer l'utilisateur
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        fullName: true,
        emailVerified: true,
        verificationToken: true,
        verificationExpires: true
      }
    });

    if (!user) {
      return res.status(404).json({
        error: 'Utilisateur non trouv√©'
      });
    }

    // V√©rifier si l'email est d√©j√† v√©rifi√©
    if (user.emailVerified) {
      return res.status(400).json({
        error: 'Votre email est d√©j√† v√©rifi√©'
      });
    }

    // G√©n√©rer un nouveau token de v√©rification
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h

    // Mettre √† jour le token dans la base de donn√©es
    await prisma.user.update({
      where: { id: userId },
      data: {
        verificationToken,
        verificationExpires
      }
    });

    // Envoyer l'email de v√©rification
    try {
      const emailResult = await emailService.sendVerificationEmail(user, verificationToken);
      
      if (emailResult.success) {
        console.log(`‚úÖ Email de v√©rification renvoy√© √†: ${user.email}`);
        
        res.json({
          message: 'Email de v√©rification envoy√© avec succ√®s',
          email: user.email,
          sentAt: new Date().toISOString()
        });
      } else {
        throw new Error('√âchec de l\'envoi de l\'email');
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email de v√©rification:', emailError);
      
      res.status(500).json({
        error: 'Erreur lors de l\'envoi de l\'email. Veuillez r√©essayer plus tard.'
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur renvoi v√©rification:', error);
    res.status(500).json({
      error: 'Erreur lors du renvoi de l\'email de v√©rification'
    });
  }
});

// ‚úÖ NOUVELLE ROUTE : STATUT EMAIL
router.get('/email-status', authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;

    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        email: true,
        emailVerified: true,
        verificationExpires: true
      }
    });

    if (!user) {
      return res.status(404).json({
        error: 'Utilisateur non trouv√©'
      });
    }

    res.json({
      email: user.email,
      emailVerified: user.emailVerified,
      verificationExpired: user.verificationExpires ? 
        new Date() > user.verificationExpires : false
    });

  } catch (error) {
    console.error('‚ùå Erreur statut email:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification du statut'
    });
  }
});

// ‚úÖ ROUTE DE TEST EMAIL
router.get('/test-email', async (req, res) => {
  try {
    const testResult = await emailService.getServiceStatus();
    res.json(testResult);
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
// ‚úÖ NOUVELLE ROUTE : RENVOYER EMAIL DE V√âRIFICATION (PUBLIQUE)
router.post('/resend-verification-public', 
  resendVerificationLimiter, 
  async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        error: 'Email requis'
      });
    }

    // V√©rifier si l'utilisateur existe
    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase() },
      select: {
        id: true,
        email: true,
        fullName: true,
        emailVerified: true,
        verificationToken: true,
        verificationExpires: true
      }
    });

    if (!user) {
      // Ne pas r√©v√©ler si l'email existe ou non pour des raisons de s√©curit√©
      return res.json({
        message: 'Si cet email existe et n\'est pas v√©rifi√©, un nouvel email sera envoy√©.'
      });
    }

    // V√©rifier si l'email est d√©j√† v√©rifi√©
    if (user.emailVerified) {
      return res.status(400).json({
        error: 'Cet email est d√©j√† v√©rifi√©. Vous pouvez vous connecter.'
      });
    }

    // G√©n√©rer un nouveau token de v√©rification
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h

    // Mettre √† jour le token dans la base de donn√©es
    await prisma.user.update({
      where: { id: user.id },
      data: {
        verificationToken,
        verificationExpires
      }
    });

    // Envoyer l'email de v√©rification
    try {
      const emailResult = await emailService.sendVerificationEmail(user, verificationToken);
      
      if (emailResult.success) {
        console.log(`‚úÖ Email de v√©rification public renvoy√© √†: ${user.email}`);
        
        res.json({
          message: 'Email de v√©rification envoy√© avec succ√®s ! V√©rifiez votre bo√Æte mail.',
          email: user.email,
          sentAt: new Date().toISOString()
        });
      } else {
        throw new Error('√âchec de l\'envoi de l\'email');
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email de v√©rification public:', emailError);
      
      res.status(500).json({
        error: 'Erreur lors de l\'envoi de l\'email. Veuillez r√©essayer plus tard.'
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur renvoi v√©rification public:', error);
    res.status(500).json({
      error: 'Erreur lors du renvoi de l\'email de v√©rification'
    });
  }
});

// ================================
// AUTRES ROUTES
// ================================

router.get('/me', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.id },
      select: {
        id: true,
        email: true,
        fullName: true,
        phone: true,
        emailVerified: true,
        phoneVerified: true,
        profilePicture: true,
        rating: true,
        totalRatings: true,
        role: true,
        birthDate: true,
        address: true,
        city: true,
        postalCode: true,
        country: true,
        identityVerified: true,
        createdAt: true,
        _count: {
          select: {
            trips: true,
            items: true,
            reviews: true
          }
        }
      }
    });

    if (!user) {
      return res.status(404).json({
        error: 'Utilisateur non trouv√©'
      });
    }

    res.json({ user });

  } catch (error) {
    console.error('‚ùå Erreur profil:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du profil'
    });
  }
});

router.post('/logout', authMiddleware, async (req, res) => {
  try {
    console.log('‚úÖ D√©connexion:', req.user.email);
    res.json({
      message: 'D√©connexion r√©ussie'
    });
  } catch (error) {
    console.error('‚ùå Erreur d√©connexion:', error);
    res.status(500).json({
      error: 'Erreur lors de la d√©connexion'
    });
  }
});

router.post('/change-password', authMiddleware, async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        error: 'Mot de passe actuel et nouveau mot de passe requis'
      });
    }

    // ‚úÖ VALIDATION RENFORC√âE DU NOUVEAU MOT DE PASSE
    if (newPassword.length < 8 || 
        !/[A-Z]/.test(newPassword) || 
        !/[a-z]/.test(newPassword) || 
        !/\d/.test(newPassword) || 
        !/[!@#$%^&*(),.?":{}|<>]/.test(newPassword)) {
      return res.status(400).json({
        error: 'Le nouveau mot de passe doit contenir au moins 8 caract√®res, une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial'
      });
    }

    const user = await prisma.user.findUnique({
      where: { id: req.user.id }
    });

    // V√©rifier le mot de passe actuel
    const validPassword = await bcrypt.compare(currentPassword, user.password);

    if (!validPassword) {
      return res.status(401).json({
        error: 'Mot de passe actuel incorrect'
      });
    }

    // Hasher le nouveau mot de passe
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);

    // Mettre √† jour le mot de passe
    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashedPassword,
        resetPasswordToken: null,
        resetPasswordExpires: null
      }
    });

    // ‚úÖ AJOUT: G√©n√©rer un token de connexion automatique
    const loginToken = jwt.sign(
      { id: user.id, email: user.email },
      authConfig.jwtSecret,
      { expiresIn: '7d' }
    );

    console.log('‚úÖ Mot de passe chang√© pour:', user.email);

    res.json({
      message: 'Mot de passe modifi√© avec succ√®s',
      // ‚úÖ AJOUT: Retourner le token et les donn√©es utilisateur
      token: loginToken,
      user: {
        id: user.id,
        email: user.email,
        fullName: user.fullName,
        emailVerified: user.emailVerified
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur changement mot de passe:', error);
    res.status(500).json({
      error: 'Erreur lors du changement de mot de passe'
    });
  }
});

module.exports = router;