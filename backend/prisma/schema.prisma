// schema.prisma - Correction pour MySQL Railway
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"  // ← CHANGÉ de postgresql à mysql
  url      = env("DATABASE_URL")
}

model User {
  id                         String                    @id @default(cuid())
  email                      String                    @unique
  password                   String
  fullName                   String
  phone                      String?
  emailVerified              Boolean                   @default(false)
  phoneVerified              Boolean                   @default(false)
  
  // Stockage BLOB pour images
  profilePicture             String?                    
  profilePictureType         String?
  profilePictureName         String?
  
  rating                     Float                     @default(0)
  totalRatings               Int                       @default(0)
  isActive                   Boolean                   @default(true)
  role                       UserRole                  @default(USER)
  verificationToken          String?                   @unique
  verificationExpires        DateTime?
  resetPasswordToken         String?                   @unique
  resetPasswordExpires       DateTime?
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  lastLoginAt                DateTime?
  address                    String?
  birthDate                  DateTime?
  city                       String?
  country                    String?                   @default("France")
  
  // Document d'identité en BLOB
  identityDocument           Bytes?                    @db.MediumBlob
  identityDocumentType       String?
  identityDocumentName       String?
  identityVerified           Boolean                   @default(false)
  identityVerifiedAt         DateTime?
  
  postalCode                 String?
  aiAnalysisResult           String?                   @db.Text
  identityVerificationStatus String?                  @default("pending")
  phoneVerificationToken     String?
  phoneVerificationExpires   DateTime?
  phoneVerificationAttempts  Int                      @default(0)

  // Relations
  items                      Item[]                    @relation("ItemOwner")
  receivedMessages           Message[]                 @relation("MessageReceiver")
  sentMessages               Message[]                 @relation("MessageSender")
  reviews                    Review[]                  @relation("ReviewAuthor")
  receivedReviews            Review[]                  @relation("ReviewReceiver")
  trips                      Trip[]                    @relation("TripOwner")
  alertNotifications         AlertNotification[]
  alerts                     Alert[]
  conversationParticipants   ConversationParticipant[]
  favorites                  Favorite[]
  notifications              Notification[]

  @@index([email])
  @@map("users")
}

model Trip {
  id               String         @id @default(cuid())
  userId           String
  departureCity    String
  departureCountry String
  arrivalCity      String
  arrivalCountry   String
  departureDate    DateTime
  arrivalDate      DateTime
  availableWeight  Float
  pricePerKg       Float
  description      String?        @db.Text
  status           TripStatus     @default(ACTIVE)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  items            Item[]
  reviews          Review[]
  user             User           @relation("TripOwner", fields: [userId], references: [id], onDelete: Cascade)
  conversations    Conversation[]

  @@index([userId])
  @@index([status])
  @@map("trips")
}

model Item {
  id              String         @id @default(cuid())
  userId          String
  tripId          String?
  name            String
  description     String         @db.Text
  weight          Float
  value           Float
  category        String
  images          Json           @default("[]") // JSON pour MySQL
  pickupCity      String
  pickupCountry   String
  deliveryCity    String
  deliveryCountry String
  status          ItemStatus     @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deliveryDate    DateTime
  fragile         Boolean        @default(false)
  insurance       Boolean        @default(false)
  maxPrice        Float?
  notes           String?        @db.Text
  pickupDate      DateTime
  urgency         String         @default("normal")
  
  trip            Trip?          @relation(fields: [tripId], references: [id], onDelete: SetNull)
  user            User           @relation("ItemOwner", fields: [userId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  favorites       Favorite[]

  @@index([userId])
  @@index([status])
  @@index([pickupCity, deliveryCity])
  @@map("items")
}

model Message {
  id             String        @id @default(cuid())
  senderId       String
  receiverId     String
  content        String        @db.Text
  read           Boolean       @default(false)
  createdAt      DateTime      @default(now())
  attachments    Json          @default("[]")
  conversationId String?
  messageType    MessageType   @default(TEXT)
  metadata       Json?
  readAt         DateTime?
  replyToId      String?
  status         MessageStatus @default(SENT)
  updatedAt      DateTime      @default(now()) @updatedAt
  
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User          @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  replyTo        Message?      @relation("MessageReply", fields: [replyToId], references: [id], onDelete: SetNull)
  replies        Message[]     @relation("MessageReply")
  sender         User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
  @@index([conversationId])
  @@map("messages")
}

model Review {
  id         String   @id @default(cuid())
  authorId   String
  receiverId String
  tripId     String?
  rating     Int
  comment    String?  @db.Text
  createdAt  DateTime @default(now())
  
  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  trip       Trip?    @relation(fields: [tripId], references: [id], onDelete: SetNull)

  @@unique([authorId, receiverId, tripId])
  @@index([authorId])
  @@index([receiverId])
  @@map("reviews")
}

model Conversation {
  id            String                    @id @default(cuid())
  tripId        String?
  itemId        String?
  type          ConversationType          @default(NEGOTIATION)
  status        ConversationStatus        @default(ACTIVE)
  lastMessageAt DateTime                  @default(now())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  
  messages      Message[]
  participants  ConversationParticipant[]
  item          Item?                     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  trip          Trip?                     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([itemId])
  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  lastReadAt     DateTime        @default(now())
  muted          Boolean         @default(false)
  
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@map("conversation_participants")
}

model Favorite {
  id        String       @id @default(cuid())
  userId    String
  itemId    String?
  tripId    String?
  type      FavoriteType
  createdAt DateTime     @default(now())
  
  item      Item?        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@unique([userId, tripId])
  @@index([userId])
  @@map("favorites")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  content   String           @db.Text
  type      NotificationType
  relatedId String?
  metadata  Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

model Alert {
  id                String              @id @default(cuid())
  userId            String
  type              AlertType
  status            AlertStatus         @default(ACTIVE)
  departureCity     String
  arrivalCity       String?
  departureDate     DateTime?
  departureDateFlex Int?
  maxPrice          Float?
  maxWeight         Float?
  description       String?             @db.Text
  departureLat      Float?
  departureLng      Float?
  radius            Int                 @default(500)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime?
  
  notifications     AlertNotification[]
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("alerts")
}

model AlertNotification {
  id          String                  @id @default(cuid())
  alertId     String
  userId      String
  triggeredBy String
  triggerType AlertTriggerType
  status      AlertNotificationStatus @default(PENDING)
  title       String
  message     String                  @db.Text
  actionUrl   String?
  createdAt   DateTime                @default(now())
  viewedAt    DateTime?
  
  alert       Alert                   @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("alert_notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum TripStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ItemStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum ConversationType {
  NEGOTIATION
  SUPPORT
  GROUP
}

enum ConversationStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum ParticipantRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  OFFER
  ACCEPTANCE
  REJECTION
  SYSTEM
  FILE
  IMAGE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum FavoriteType {
  ITEM
  TRIP
  USER
}

enum NotificationType {
  MESSAGE
  OFFER
  ACCEPTANCE
  REJECTION
  TRIP_UPDATE
  SYSTEM
  REMINDER
}

enum AlertType {
  FLIGHT_NEEDED
  PARCEL_NEEDED
}

enum AlertStatus {
  ACTIVE
  PAUSED
  EXPIRED
  DELETED
}

enum AlertTriggerType {
  FLIGHT
  PARCEL
}

enum AlertNotificationStatus {
  PENDING
  SENT
  VIEWED
  CLICKED
}