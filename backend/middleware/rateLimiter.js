// ================================
// RATE LIMITER MIDDLEWARE - CHEAPSHIP
// ================================

const rateLimit = require('express-rate-limit');

// âœ… HELPER FUNCTION POUR IPv6 (rÃ©sout l'erreur Railway)
const getClientIP = (req) => {
  return req.ip || 
         req.connection.remoteAddress || 
         req.socket.remoteAddress ||
         (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
         req.headers['x-forwarded-for']?.split(',')[0]?.trim() ||
         'unknown';
};

// ================================
// RATE LIMITERS GÃ‰NÃ‰RAUX
// ================================

// Rate limiter gÃ©nÃ©ral pour l'API
const apiLimiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS) || 15 * 60 * 1000, // 15 minutes
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS) || 100, // Limite par IP
  message: {
    error: 'Trop de requÃªtes. RÃ©essayez dans 15 minutes.',
    retryAfter: '15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP, // âœ… FIX IPv6
  skip: (req) => {
    // Ignorer en dÃ©veloppement si configurÃ©
    return process.env.NODE_ENV === 'development' && process.env.SKIP_RATE_LIMIT === 'true';
  }
});

// Rate limiter strict pour l'authentification
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: parseInt(process.env.AUTH_RATE_LIMIT_MAX) || 5, // 5 tentatives max
  message: {
    error: 'Trop de tentatives de connexion. RÃ©essayez dans 15 minutes.',
    retryAfter: '15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP, // âœ… FIX IPv6
  skipSuccessfulRequests: true // Ne compte que les Ã©checs
});

// ================================
// RATE LIMITERS SPÃ‰CIALISÃ‰S
// ================================

// Rate limiter pour la crÃ©ation de compte
const createAccountLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 3, // 3 comptes par heure max
  message: {
    error: 'Trop de crÃ©ations de compte. RÃ©essayez dans 1 heure.',
    retryAfter: '1 heure'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour le login
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 10, // 10 tentatives de login
  message: {
    error: 'Trop de tentatives de connexion. RÃ©essayez dans 15 minutes.',
    retryAfter: '15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP, // âœ… FIX IPv6
  skipSuccessfulRequests: true
});

// Rate limiter pour les emails (vÃ©rification, reset, etc.)
const emailLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 5, // 5 emails par heure
  message: {
    error: 'Trop d\'emails envoyÃ©s. RÃ©essayez dans 1 heure.',
    retryAfter: '1 heure'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour les uploads de fichiers
const uploadLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 20, // 20 uploads par 15 minutes
  message: {
    error: 'Trop d\'uploads. RÃ©essayez dans 15 minutes.',
    retryAfter: '15 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour les messages/chat
const messageLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 30, // 30 messages par minute
  message: {
    error: 'Trop de messages. Ralentissez le rythme.',
    retryAfter: '1 minute'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour les recherches
const searchLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 20, // 20 recherches par minute
  message: {
    error: 'Trop de recherches. RÃ©essayez dans 1 minute.',
    retryAfter: '1 minute'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// ================================
// RATE LIMITERS MÃ‰TIER
// ================================

// Rate limiter pour la crÃ©ation de voyages
const tripCreationLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 10, // 10 voyages par heure
  message: {
    error: 'Trop de voyages crÃ©Ã©s. RÃ©essayez dans 1 heure.',
    retryAfter: '1 heure'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour la crÃ©ation de colis
const parcelCreationLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 15, // 15 colis par heure
  message: {
    error: 'Trop de colis crÃ©Ã©s. RÃ©essayez dans 1 heure.',
    retryAfter: '1 heure'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// Rate limiter pour les notifications
const notificationLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutes
  max: 50, // 50 notifications par 5 minutes
  message: {
    error: 'Trop de notifications. RÃ©essayez dans 5 minutes.',
    retryAfter: '5 minutes'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: getClientIP // âœ… FIX IPv6
});

// ================================
// EXPORTS
// ================================

module.exports = {
  // Limiters gÃ©nÃ©raux
  apiLimiter,
  authLimiter,
  
  // Limiters d'authentification
  createAccountLimiter,
  loginLimiter,
  emailLimiter,
  
  // Limiters de fonctionnalitÃ©s
  uploadLimiter,
  messageLimiter,
  searchLimiter,
  
  // Limiters mÃ©tier
  tripCreationLimiter,
  parcelCreationLimiter,
  notificationLimiter,
  
  // Helper function
  getClientIP
};

// ================================
// LOGGING ET DEBUG
// ================================

if (process.env.NODE_ENV === 'development') {
  console.log('ðŸ”§ Rate limiters configurÃ©s:');
  console.log(`   â€¢ API: ${process.env.RATE_LIMIT_MAX_REQUESTS || 100} req/15min`);
  console.log(`   â€¢ Auth: ${process.env.AUTH_RATE_LIMIT_MAX || 5} req/15min`);
  console.log(`   â€¢ Upload: 20 req/15min`);
  console.log(`   â€¢ Messages: 30 req/1min`);
  console.log(`   â€¢ Recherche: 20 req/1min`);
  console.log(`   â€¢ IPv6 support: âœ… ActivÃ©`);
}